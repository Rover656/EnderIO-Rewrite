plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = '1.0'
group = 'com.enderio'
archivesBaseName = 'enderio'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

// List of all subsets. This is used for dividing the mod into logical components.
// TODO: 1.19: Tidy the divisions and what goes where.
def subsets = [
        'conduits',
        'machines',
        'decor'
]

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        resources { srcDir 'src/generated/resources' }
    }
}

configurations {
    apiImplementation.extendsFrom(implementation)
    apiCompileOnly.extendsFrom(compileOnly)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

// Add all subset source sets.
for (String set : subsets) {
    setupSourceSet(set)
}

minecraft {
    mappings channel: 'official', version: '1.19'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'enderio'

            mods {
                enderio {
                    source sourceSets.api
                    source sourceSets.main

                    for (String set : subsets) {
                        source sourceSets.getByName(set)
                    }
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'enderio'

            mods {
                enderio {
                    source sourceSets.api
                    source sourceSets.main

                    for (String set : subsets) {
                        source sourceSets.getByName(set)
                    }
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'enderio', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                enderio {
                    source sourceSets.api
                    source sourceSets.main

                    for (String set : subsets) {
                        source sourceSets.getByName(set)
                    }
                }
            }
        }
    }
}

// TODO: Review these: Kinda just nicked them from mekanism

def setupSourceSet(String name) {
    def sourceSet = sourceSets.create(name)
    sourceSet.compileClasspath += sourceSets.api.output
    sourceSet.compileClasspath += sourceSets.main.output
    //Create all secondary sourceSets for this module
    setupExtraSourceSets(sourceSet)
}

def setupExtraSourceSets(SourceSet base) {
    // Setup and extend configurations for alternate modules. First by making the implementation, compileOnly, runtimeOnly equivalents
    //  for those modules extend the main ones
    def baseImplementation = project.configurations.maybeCreate(base.getTaskName(null, "implementation"))
    def baseCompileOnly = project.configurations.maybeCreate(base.getTaskName(null, "compileOnly"))
    def baseRuntimeOnly = project.configurations.maybeCreate(base.getTaskName(null, "runtimeOnly"))
    if (base != project.sourceSets.main) {
        // If this is a secondary module then make the base tasks extend the builtin ones
        baseImplementation.extendsFrom(project.configurations.getByName("implementation"))
        baseCompileOnly.extendsFrom(project.configurations.getByName("compileOnly"))
        baseRuntimeOnly.extendsFrom(project.configurations.getByName("runtimeOnly"))
    }
}

def replaceProperties = [
        version       : version, mcversion: minecraft_version_range,
        forge_version : forge_version_range,
        loader_version: loader_version_range]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching('META-INF/mods.toml') {
        expand replaceProperties
    }
}

repositories {
    // Registrate
    maven { url "https://maven.tterrag.com/" }

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    // Temp for TOP, https://github.com/McJtyMods/TheOneProbe/issues/506
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven { url 'https://maven.blamejared.com' }

    mavenLocal()
}

jarJar.enable()

dependencies {
    // Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Source set dependencies
//    implementation sourceSets.api.output
//    implementation sourceSets.core.output

//    conduitsImplementation sourceSets.main.output

    // Registrate
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: "${registrate_version_range}")

    // JEI
//    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
//    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
//    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common:${jei_version}")
//    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    // The One Probe
//    implementation fg.deobf("mcjty.theoneprobe:TheOneProbe:${minecraft_version}-${top_version}")
//    implementation fg.deobf("curse.maven:the-one-probe-245211:${top_version}")

    // Patchouli
//    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // While we don't have conduits etc.
//    runtimeOnly fg.deobf("curse.maven:mekanism-268560:3743835")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "EnderIO",
                "Specification-Vendor"    : "SleepyTrousers",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "SleepyTrousers",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // Add other source sets
    from sourceSets.api.output

    for (String set : subsets) {
        from sourceSets.getByName(set).output
    }
}

tasks.jarJar.configure {
    from sourceSets.api.output

    for (String set : subsets) {
        from sourceSets.getByName(set).output
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
